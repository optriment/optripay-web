datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                   String   @map("user_id") @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  // NOTE: This field is required to use GitHub Provider
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  services      Service[]
  orders        Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Service {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  price       Int
  sellerId    String   @map(name: "seller_id") @db.Uuid
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  seller      User     @relation(fields: [sellerId], references: [id])
  orders      Order[]

  @@map("services")
}

model Order {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyerId                String    @map(name: "buyer_id") @db.Uuid
  serviceId              String    @map(name: "service_id") @db.Uuid
  price                  Int
  walletAddress          String?   @map(name: "wallet_address")
  transactionHash        String?   @map(name: "transaction_hash")
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  paidAt                 DateTime? @map(name: "paid_at")
  transactionConfirmedAt DateTime? @map(name: "transaction_confirmed_at")
  deliveredAt            DateTime? @map(name: "delivered_at")
  buyer                  User      @relation(fields: [buyerId], references: [id])
  service                Service   @relation(fields: [serviceId], references: [id])

  @@map("orders")
}
